# Use Node.js as the base image
FROM node:16-alpine

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install the dependencies for the React application
RUN npm ci

# Copy the application files
COPY . .


ARG REACT_APP_FIREBASE_API_KEY
ARG REACT_APP_FIREBASE_APP_ID
ARG REACT_APP_FIREBASE_AUTH_DOMAIN
ARG REACT_APP_FIREBASE_MESSAGING_SENDER_ID
ARG REACT_APP_FIREBASE_PROJECT_ID
ARG REACT_APP_FIREBASE_STORAGE_BUCKET
ARG SUMMARY_API_KEY
ARG APPINSIGHTS_INSTRUMENTATIONKEY
ARG APPLICATIONINSIGHTS_CONNECTION_STRING

# Set the environment variable inside the Docker image
ENV REACT_APP_FIREBASE_API_KEY=$REACT_APP_FIREBASE_API_KEY
ENV REACT_APP_FIREBASE_APP_ID=$REACT_APP_FIREBASE_APP_ID
ENV REACT_APP_FIREBASE_AUTH_DOMAIN=$REACT_APP_FIREBASE_AUTH_DOMAIN
ENV REACT_APP_FIREBASE_MESSAGING_SENDER_ID=$REACT_APP_FIREBASE_MESSAGING_SENDER_ID
ENV REACT_APP_FIREBASE_PROJECT_ID=$REACT_APP_FIREBASE_PROJECT_ID
ENV REACT_APP_FIREBASE_STORAGE_BUCKET=$REACT_APP_FIREBASE_STORAGE_BUCKET
ENV SUMMARY_API_KEY=$SUMMARY_API_KEY
ENV APPINSIGHTS_INSTRUMENTATIONKEY=$APPINSIGHTS_INSTRUMENTATIONKEY
ENV APPLICATIONINSIGHTS_CONNECTION_STRING=$APPLICATIONINSIGHTS_CONNECTION_STRING

# Run the tests
RUN npm test


# Build the React application
RUN npm run build

# Set the working directory for the server
WORKDIR /app/server

# Copy the server package.json and package-lock.json
COPY server/package*.json ./

# Install the dependencies for the server
RUN npm ci

# Expose the port that the server will run on
EXPOSE 80

# Start the server
CMD ["npm", "start"]
